# logical or from each group - I am sure there is a better way to do this, but it worked
keep <- rowSums(counts(dds, normalized = TRUE)[, c("sample.donor_316_72hrs_moi_5",
"sample.donor_316_72hrs_moi_3",
"sample.donor_316_48hrs_moi_5",
"sample.donor_316_48hrs_moi_3",
"sample.donor_262_72hrs_moi_5",
"sample.donor_262_72hrs_moi_3",
"sample.donor_262_48hrs_moi_5",
"sample.donor_262_48hrs_moi_3",
"sample.donor_236_72hrs_moi_5",
"sample.donor_236_72hrs_moi_3",
"sample.donor_236_48hrs_moi_5",
"sample.donor_236_48hrs_moi_3")])/12 > 1
keep <- (keep | (rowSums(counts(dds, normalized = TRUE)[, c("sample.donor_316_72hrs_mock", "sample.donor_262_72hrs_mock", "sample.donor_236_72hrs_mock")])/3 > 1))
dds <- dds[keep,]
nrow(dds) # How many genes are you left with? (17,488)
####Differential Expression Analysis
# function to conduct the differential expression - will compare between every variable you specified
dds <- DESeq(dds)
res <- results(dds, contrast = c("Condition", "Infected", "Mock"))
# First, get normalized counts into a data frame with gene names as a column
countsdf <- as.data.frame(counts(dds, normalized=TRUE))
countsdf$ensembl_gene_id <- rownames(countsdf)
# Examples for easy ways to put the DESeq comparisons into a dataframe
all <- as.data.frame(res@listData, row.names = res@rownames)
all$ensemble_gene_id <- rownames(all)
gene_names <- as.data.frame(gene_info[,c(1,3)])
all <- left_join(all, gene_names, by = c("ensemble_gene_id" = "ensembl_gene_id"))
up_genes <- all %>%
filter(log2FoldChange > 1 & padj < 0.05)
up_gene_list <- up_genes$external_gene_name
down_genes <- all %>%
filter(log2FoldChange < -1 & padj < 0.05)
down_gene_list <- down_genes$external_gene_name
#rlog transformed expression data:
rlog_counts <- as.data.frame(assay(rld))
################
# DESeq Analysis for 72 hours MOI 5
coldata_72hr_MOI5 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/coldata_72hr_MOI5.csv", header = TRUE)
coldata_72hr_MOI5$Condition <- factor(coldata_72hr_MOI5$Condition)
gene_counts_72hr_MOI5_DESeq <- as.matrix(gene_counts[, c(8,13,18,12,17,22)])
mode(gene_counts_72hr_MOI5_DESeq) <- "integer"
dds_72hr_MOI5 <- DESeqDataSetFromMatrix(countData = gene_counts_72hr_MOI5_DESeq,
colData = coldata_72hr_MOI5,
design = ~ Condition)
dds_72hr_MOI5 <- estimateSizeFactors(dds_72hr_MOI5)
quantile(rowSums(counts(dds_72hr_MOI5, normalized = TRUE)), probs = c(0.1, 0.2, 0.3))
keep <- rowSums(counts(dds_72hr_MOI5, normalized = TRUE)[, c("sample.donor_316_72hrs_moi_5",
"sample.donor_262_72hrs_moi_5",
"sample.donor_236_72hrs_moi_5")])/3 > 1
keep <- (keep | (rowSums(counts(dds_72hr_MOI5, normalized = TRUE)[, c("sample.donor_316_72hrs_mock", "sample.donor_262_72hrs_mock", "sample.donor_236_72hrs_mock")])/3 > 1))
dds_72hr_MOI5 <- dds_72hr_MOI5[keep,]
nrow(dds_72hr_MOI5) # How many genes are you left with? (17,485)
dds_72hr_MOI5 <- DESeq(dds_72hr_MOI5)
res2 <- results(dds_72hr_MOI5, contrast = c("Condition", "Infected", "Mock"))
countsdf2 <- as.data.frame(counts(dds_72hr_MOI5, normalized=TRUE))
countsdf2$ensembl_gene_id <- rownames(countsdf2)
all2 <- as.data.frame(res2@listData, row.names = res2@rownames)
all2$ensemble_gene_id <- rownames(all2)
gene_names <- as.data.frame(gene_info[,c(1,3)])
all2 <- left_join(all2, gene_names, by = c("ensemble_gene_id" = "ensembl_gene_id"))
up_genes_72hr_MOI5 <- all2 %>%
filter(log2FoldChange > 1 & padj < 0.05)
up_gene_list_72hr_MOI5 <- up_genes_72hr_MOI5$external_gene_name
down_genes_72hr_MOI5 <- all2 %>%
filter(log2FoldChange < -1 & padj < 0.05)
down_gene_list_72hr_MOI5 <- down_genes_72hr_MOI5$external_gene_name
# DESeq Analysis for 72 hours MOI 3
coldata_72hr_MOI3 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/coldata_72hr_MOI3.csv", header = TRUE)
coldata_72hr_MOI3$Condition <- factor(coldata_72hr_MOI3$Condition)
gene_counts_72hr_MOI3_DESeq <- as.matrix(gene_counts[, c(9,14,19,12,17,22)])
mode(gene_counts_72hr_MOI3_DESeq) <- "integer"
dds_72hr_MOI3 <- DESeqDataSetFromMatrix(countData = gene_counts_72hr_MOI3_DESeq,
colData = coldata_72hr_MOI3,
design = ~ Condition)
dds_72hr_MOI3 <- estimateSizeFactors(dds_72hr_MOI3)
quantile(rowSums(counts(dds_72hr_MOI3, normalized = TRUE)), probs = c(0.1, 0.2, 0.3))
keep <- rowSums(counts(dds_72hr_MOI3, normalized = TRUE)[, c("sample.donor_316_72hrs_moi_3",
"sample.donor_262_72hrs_moi_3",
"sample.donor_236_72hrs_moi_3")])/3 > 1
keep <- (keep | (rowSums(counts(dds_72hr_MOI3, normalized = TRUE)[, c("sample.donor_316_72hrs_mock", "sample.donor_262_72hrs_mock", "sample.donor_236_72hrs_mock")])/3 > 1))
dds_72hr_MOI3 <- dds_72hr_MOI3[keep,]
nrow(dds_72hr_MOI3) # How many genes are you left with? (17,491)
dds_72hr_MOI3 <- DESeq(dds_72hr_MOI3)
res3 <- results(dds_72hr_MOI3, contrast = c("Condition", "Infected", "Mock"))
countsdf3 <- as.data.frame(counts(dds_72hr_MOI3, normalized=TRUE))
countsdf3$ensembl_gene_id <- rownames(countsdf3)
all3 <- as.data.frame(res3@listData, row.names = res3@rownames)
all3$ensemble_gene_id <- rownames(all3)
gene_names <- as.data.frame(gene_info[,c(1,3)])
all3 <- left_join(all3, gene_names, by = c("ensemble_gene_id" = "ensembl_gene_id"))
up_genes_72hr_MOI3 <- all3 %>%
filter(log2FoldChange > 1 & padj < 0.05)
up_gene_list_72hr_MOI3 <- up_genes_72hr_MOI3$external_gene_name
down_genes_72hr_MOI3 <- all3 %>%
filter(log2FoldChange < -1 & padj < 0.05)
down_gene_list_72hr_MOI3 <- down_genes_72hr_MOI3$external_gene_name
# DESeq Analysis for 48 hours MOI 5
coldata_48hr_MOI5 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/coldata_48hr_MOI5.csv", header = TRUE)
coldata_48hr_MOI5$Condition <- factor(coldata_48hr_MOI5$Condition)
gene_counts_48hr_MOI5_DESeq <- as.matrix(gene_counts[, c(10,15,20,12,17,22)])
mode(gene_counts_48hr_MOI5_DESeq) <- "integer"
dds_48hr_MOI5 <- DESeqDataSetFromMatrix(countData = gene_counts_48hr_MOI5_DESeq,
colData = coldata_48hr_MOI5,
design = ~ Condition)
dds_48hr_MOI5 <- estimateSizeFactors(dds_48hr_MOI5)
quantile(rowSums(counts(dds_48hr_MOI5, normalized = TRUE)), probs = c(0.1, 0.2, 0.3))
keep <- rowSums(counts(dds_48hr_MOI5, normalized = TRUE)[, c("sample.donor_316_48hrs_moi_5",
"sample.donor_262_48hrs_moi_5",
"sample.donor_236_48hrs_moi_5")])/3 > 1
keep <- (keep | (rowSums(counts(dds_48hr_MOI5, normalized = TRUE)[, c("sample.donor_316_72hrs_mock", "sample.donor_262_72hrs_mock", "sample.donor_236_72hrs_mock")])/3 > 1))
dds_48hr_MOI5 <- dds_48hr_MOI5[keep,]
nrow(dds_48hr_MOI5) # How many genes are you left with? (17,529)
dds_48hr_MOI5 <- DESeq(dds_48hr_MOI5)
res4 <- results(dds_48hr_MOI5, contrast = c("Condition", "Infected", "Mock"))
countsdf4 <- as.data.frame(counts(dds_48hr_MOI5, normalized=TRUE))
countsdf4$ensembl_gene_id <- rownames(countsdf4)
all4 <- as.data.frame(res4@listData, row.names = res4@rownames)
all4$ensemble_gene_id <- rownames(all4)
gene_names <- as.data.frame(gene_info[,c(1,3)])
all4 <- left_join(all4, gene_names, by = c("ensemble_gene_id" = "ensembl_gene_id"))
up_genes_48hr_MOI5 <- all4 %>%
filter(log2FoldChange > 1 & padj < 0.05)
up_gene_list_48hr_MOI5 <- up_genes_48hr_MOI5$external_gene_name
down_genes_48hr_MOI5 <- all4 %>%
filter(log2FoldChange < -1 & padj < 0.05)
down_gene_list_48hr_MOI5 <- down_genes_48hr_MOI5$external_gene_name
# DESeq Analysis for 48 hours MOI 3
coldata_48hr_MOI3 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/coldata_48hr_MOI3.csv", header = TRUE)
coldata_48hr_MOI3$Condition <- factor(coldata_48hr_MOI3$Condition)
gene_counts_48hr_MOI3_DESeq <- as.matrix(gene_counts[, c(11,16,21,12,17,22)])
mode(gene_counts_48hr_MOI3_DESeq) <- "integer"
dds_48hr_MOI3 <- DESeqDataSetFromMatrix(countData = gene_counts_48hr_MOI3_DESeq,
colData = coldata_48hr_MOI3,
design = ~ Condition)
dds_48hr_MOI3 <- estimateSizeFactors(dds_48hr_MOI3)
quantile(rowSums(counts(dds_48hr_MOI3, normalized = TRUE)), probs = c(0.1, 0.2, 0.3))
keep <- rowSums(counts(dds_48hr_MOI3, normalized = TRUE)[, c("sample.donor_316_48hrs_moi_3",
"sample.donor_262_48hrs_moi_3",
"sample.donor_236_48hrs_moi_3")])/3 > 1
keep <- (keep | (rowSums(counts(dds_48hr_MOI3, normalized = TRUE)[, c("sample.donor_316_72hrs_mock", "sample.donor_262_72hrs_mock", "sample.donor_236_72hrs_mock")])/3 > 1))
dds_48hr_MOI3 <- dds_48hr_MOI3[keep,]
nrow(dds_48hr_MOI3) # How many genes are you left with? (17,371)
dds_48hr_MOI3 <- DESeq(dds_48hr_MOI3)
res5 <- results(dds_48hr_MOI3, contrast = c("Condition", "Infected", "Mock"))
countsdf5 <- as.data.frame(counts(dds_48hr_MOI3, normalized=TRUE))
countsdf5$ensembl_gene_id <- rownames(countsdf5)
all5 <- as.data.frame(res5@listData, row.names = res5@rownames)
all5$ensemble_gene_id <- rownames(all5)
gene_names <- as.data.frame(gene_info[,c(1,3)])
all5 <- left_join(all5, gene_names, by = c("ensemble_gene_id" = "ensembl_gene_id"))
up_genes_48hr_MOI3 <- all5 %>%
filter(log2FoldChange > 1 & padj < 0.05)
up_gene_list_48hr_MOI3 <- up_genes_48hr_MOI3$external_gene_name
down_genes_48hr_MOI3 <- all5 %>%
filter(log2FoldChange < -1 & padj < 0.05)
down_gene_list_48hr_MOI3 <- down_genes_48hr_MOI3$external_gene_name
# Heatmap code for 72hr MOI3 Samples:
# Adding 0.1 to all the normalized counts
countsdf3[, c(1,2,3,4,5,6)] <- countsdf3[, c(1,2,3,4,5,6)] + 0.1
# Heatmap for Med25 from up-regulated genes 72hr_MOI3
med25_genes <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/Med25.csv", sep="")
med25_genes <- med25_genes$Gene_Symbol
med25_genes <- intersect(up_gene_list_72hr_MOI3, med25_genes)
countsdf3 <- left_join(countsdf3, gene_names, by = c("ensembl_gene_id" = "ensembl_gene_id"))
med25 <- countsdf3 %>%
filter(external_gene_name %in% med25_genes) %>%
mutate(D316vsMockLog2FC = log(sample.donor_316_72hrs_moi_3/sample.donor_316_72hrs_mock, 2)) %>%
mutate(D262vsMockLog2FC = log(sample.donor_262_72hrs_moi_3/sample.donor_262_72hrs_mock, 2)) %>%
mutate(D236vsMockLog2FC = log(sample.donor_236_72hrs_moi_3/sample.donor_236_72hrs_mock, 2))
rownames(med25) <- med25$external_gene_name
med25 <- med25[,c(9,10,11)]
colnames(med25) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3")
med25 <- as.matrix(med25)
col_fun <- colorRamp2(c(0.85, 2, 4, 7.10), c("peachpuff", "coral", "tomato", "firebrick"))
Heatmap(med25,
name = "Log2FC",
col = col_fun,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 10),
width = unit(7, "cm"),
height = unit(11, "cm"))
# Heatmap for IRF from up-regulated genes 72hr_MOI3
# Our genes overlapped with 7 IRF pathways in GSEA. Finding all of them here:
IRF_1 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_1.csv", sep="")
IRF_geneset1 <- IRF_1$Gene_Symbol
IRF_geneset1 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset1)
IRF_2 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_2.csv", sep="")
IRF_geneset2 <- IRF_2$Gene_Symbol
IRF_geneset2 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset2)
IRF_3 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_3.csv", sep="")
IRF_geneset3 <- IRF_3$Gene_Symbol
IRF_geneset3 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset3)
IRF_4 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_4.csv", sep="")
IRF_geneset4 <- IRF_4$Gene_Symbol
IRF_geneset4 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset4)
IRF_5 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_5.csv", sep="")
IRF_geneset5 <- IRF_5$Gene_Symbol
IRF_geneset5 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset5)
IRF_6 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_6.csv", sep="")
IRF_geneset6 <- IRF_6$Gene_Symbol
IRF_geneset6 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset6)
IRF_7 <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/IRF_7.csv", sep="")
IRF_geneset7 <- IRF_7$Gene_Symbol
IRF_geneset7 <- intersect(up_gene_list_72hr_MOI3, IRF_geneset7)
# Overall list of genes:
IRF_genes <- unique(c(IRF_geneset1, IRF_geneset2, IRF_geneset3, IRF_geneset4, IRF_geneset5, IRF_geneset6, IRF_geneset7))
IRF <- countsdf3 %>%
filter(external_gene_name %in% IRF_genes) %>%
mutate(D316vsMockLog2FC = log(sample.donor_316_72hrs_moi_3/sample.donor_316_72hrs_mock, 2)) %>%
mutate(D262vsMockLog2FC = log(sample.donor_262_72hrs_moi_3/sample.donor_262_72hrs_mock, 2)) %>%
mutate(D236vsMockLog2FC = log(sample.donor_236_72hrs_moi_3/sample.donor_236_72hrs_mock, 2))
rownames(IRF) <- IRF$external_gene_name
IRF <- IRF[,c(9,10,11)]
colnames(IRF) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3")
IRF <- as.matrix(IRF)
col_fun2 <- colorRamp2(c(0, 2, 4, 6, 8, 10, 12, 14), c("seashell", "peachpuff","lightsalmon", "coral", "tomato", "red3", "firebrick", "darkred"))
Heatmap(IRF,
name = "Log2FC",
col = col_fun2,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 5),
width = unit(7, "cm"),
height = unit(14, "cm"))
# Heatmap for NFKBIA_TARGET_GENES from down-regulated genes 72hr_MOI3
NFKBIA <- read.csv("~/Library/CloudStorage/Box-Box/PaytonLabBox/People/Oam/RSV/RSV_ALI_July2023/DESeq_analysis_files/NFKBIA.csv", sep="")
NFKBIA_geneset <- NFKBIA$Gene_Symbol
NFKBIA_geneset <- intersect(down_gene_list_72hr_MOI3, NFKBIA_geneset)
NFKBIA_df <- countsdf3 %>%
filter(external_gene_name %in% NFKBIA_geneset) %>%
mutate(D316vsMockLog2FC = log(sample.donor_316_72hrs_moi_3/sample.donor_316_72hrs_mock, 2)) %>%
mutate(D262vsMockLog2FC = log(sample.donor_262_72hrs_moi_3/sample.donor_262_72hrs_mock, 2)) %>%
mutate(D236vsMockLog2FC = log(sample.donor_236_72hrs_moi_3/sample.donor_236_72hrs_mock, 2))
rownames(NFKBIA_df) <- NFKBIA_df$external_gene_name
NFKBIA_df <- NFKBIA_df[,c(9,10,11)]
colnames(NFKBIA_df) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3")
NFKBIA_df <- as.matrix(NFKBIA_df)
col_fun3 <- colorRamp2(c(0, -1, -2, -3, -4, -5), c("lightsteelblue", "cornflowerblue", "royalblue", "mediumblue", "darkblue", "midnightblue"))
Heatmap(NFKBIA_df,
name = "Log2FC",
col = col_fun3,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 8),
width = unit(7, "cm"),
height = unit(14, "cm"))
# Generating heat maps for 72 Hours MOI 3 transcription factors:
up_tf <- c("IRF6", "ISRE", "IRF7", "ICSBP", "IRF1", "ZNF318", "IRF2", "AP1", "IRF2", "TATA",
"HES2", "ZNF597", "ZNF768", "PU1", "ETS2", "NF1", "PSMB5", "NFAT", "LHX9", "MED25",
"BACH1", "TFEB", "LEF1", "STAT5B", "AP4", "ETS1", "PAX4", "ZNF133", "ELF1", "AREB6",
"NFKB", "STAT5A", "NFXL1", "BACH2", "MAML1", "MMEF2", "ATF1", "ZNF394", "AR", "ATXN7L3",
"ETS", "HMG20B", "CEBP", "CREL", "SREBP", "STAT", "CP2", "PEA3", "MZF1", "GATA",
"CHAF1BFREAC2", "MAFG", "IK3", "LHX3", "BRN2", "SIPA1", "NFE2", "PTF1BETA", "GATA4",
"NERF", "CEBPA", "T3R", "GLI1", "CEBPB", "AML", "HBZ", "HNF4", "BCL6B", "ZNF512",
"TEF1", "PAX8", "UBN1", "VDR", "CREB3L4", "ADNP", "DLX2", "TEAD2", "SFMBT1", "MZF1",
"DLX6", "TERF1")
up_tf <- intersect(countsdf3$external_gene_name, up_tf)
up_tf_df <- countsdf3 %>%
filter(external_gene_name %in% up_tf) %>%
mutate(D316vsMockLog2FC = log(sample.donor_316_72hrs_moi_3/sample.donor_316_72hrs_mock, 2)) %>%
mutate(D262vsMockLog2FC = log(sample.donor_262_72hrs_moi_3/sample.donor_262_72hrs_mock, 2)) %>%
mutate(D236vsMockLog2FC = log(sample.donor_236_72hrs_moi_3/sample.donor_236_72hrs_mock, 2))
rownames(up_tf_df) <- up_tf_df$external_gene_name
up_tf_expressions <- up_tf_df[,c(1,2,3,4,5,6)]
up_tf_df <- up_tf_df[,c(9,10,11)]
colnames(up_tf_df) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3")
up_tf_df <- as.matrix(up_tf_df)
col_fun4 <- colorRamp2(c(-5, -2.5, 0, 2.5, 5), c("darkblue","blue", "beige", "orange", "red"))
Heatmap(up_tf_df,
name = "Log2FC",
col = col_fun4,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 8),
width = unit(7, "cm"),
height = unit(14, "cm"))
colnames(up_tf_expressions) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3", "D316_Mock", "D262_Mock", "D236_Mock")
up_tf_expressions <- t(scale(t(up_tf_expressions)))
up_tf_expressions <- as.matrix(up_tf_expressions)
col_fun6 <- colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
Heatmap(up_tf_expressions,
name = "Normalized Expression",
col = col_fun6,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 8),
width = unit(7, "cm"),
height = unit(14, "cm"))
down_tf <- c("NFKBIA", "MYOCD", "HMCES", "RPA1", "CASP3", "HJURP", "T3R", "SNAI1", "NFAT", "FXR1",
"SNRNP70", "ADNP", "ERR1", "PAX4", "THRA", "DROSHA", "SUPT16H", "HAND1", "AP4", "SETD7",
"ZNF92", "MYOD", "SMN1", "SMN2", "TFAM", "FOXN3", "ZNF680", "LFA1", "AREB6", "PAX4",
"MYOGENIN", "STAT5A", "STAT5B", "RARB", "KLF7", "OCT", "ZNF320", "ZNF274", "AHR", "ZFHX3",
"DICER1", "AR", "ZNF30", "MZF1")
down_tf <- intersect(countsdf3$external_gene_name, down_tf)
down_tf_df <- countsdf3 %>%
filter(external_gene_name %in% down_tf) %>%
mutate(D316vsMockLog2FC = log(sample.donor_316_72hrs_moi_3/sample.donor_316_72hrs_mock, 2)) %>%
mutate(D262vsMockLog2FC = log(sample.donor_262_72hrs_moi_3/sample.donor_262_72hrs_mock, 2)) %>%
mutate(D236vsMockLog2FC = log(sample.donor_236_72hrs_moi_3/sample.donor_236_72hrs_mock, 2))
rownames(down_tf_df) <- down_tf_df$external_gene_name
down_tf_expressions <- down_tf_df[,c(1,2,3,4,5,6)]
down_tf_df <- down_tf_df[,c(9,10,11)]
colnames(down_tf_df) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3")
down_tf_df <- as.matrix(down_tf_df)
col_fun5 <- colorRamp2(c(-4, -2, 0, 2, 4), c("darkblue", "blue", "beige", "orange", "red"))
Heatmap(down_tf_df,
name = "Log2FC",
col = col_fun5,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 8),
width = unit(7, "cm"),
height = unit(14, "cm"))
colnames(down_tf_expressions) <- c("D316_72MOI3", "D262_72MOI3", "D236_72MOI3", "D316_Mock", "D262_Mock", "D236_Mock")
down_tf_expressions <- t(scale(t(down_tf_expressions)))
down_tf_expressions <- as.matrix(down_tf_expressions)
col_fun7 <- colorRamp2(c(-2, 0, 2), c("blue", "white", "red"))
Heatmap(down_tf_expressions,
name = "Normalized Expression",
col = col_fun7,
cluster_rows = TRUE,
cluster_columns = TRUE,
show_row_names = TRUE,
show_column_names = TRUE,
column_names_gp = gpar(fontsize = 10),
row_names_gp = gpar(fontsize = 8),
width = unit(7, "cm"),
height = unit(14, "cm"))
# Visualize Pathways
# heatmaps for the electron transport, oxidative phosphorylation, citric acid cycle in 72hrMOI3 down_all genes
# Heatmaps for CASP3 and RPA1 target genes in 72hrMOI3 down transcription factors
# Single Cell Data: Look through HTML summary, annotation information
# Initial goal for single cell data: determine which annotations to use for cell annotations
combined_obj = readRDS(file = "combined_obj.rds")
\f0\fs24 \cf0 [![](https://mermaid.ink/img/pako:eNqVU8tuwyAQ_BWLU6vEP-BDpSS-5JJLrr5sYWtbNRDBkqhy8-_FrwbbVFE5odlhZnZXtIxrgSxjvAFr8xpKA7JQiT97UJ9Jmn6_JTvOtVN00E2DnGqtkiypwC5pB2dJSzRx3lok1A6ZEZ2ZfsjtY08i7YB1Jz05-Y4mS46KsEQTVPbQgOIYK51AevxMplblA94IvGhb08trgN1qqoSB2wwskQbfJTp6TvA9DN8NMEi-ASHGfmYqBqW-YqziH0yjibxYlrx3ZHSPWS-iRBSXzY0S9g-H9Tr_bzFpPPNony4z3Qlh0NrY-o95BO2X6qVWXQ86S_iY_0ZkW-YjSaiF_199soJRhRILlvmrwA9wDRWsUB0VHOnzl-IsI-Nwy9xFAOH4Iwfw_gPS3hp-?type=png)](https://mermaid.live/edit#pako:eNqVU8tuwyAQ_BWLU6vEP-BDpSS-5JJLrr5sYWtbNRDBkqhy8-_FrwbbVFE5odlhZnZXtIxrgSxjvAFr8xpKA7JQiT97UJ9Jmn6_JTvOtVN00E2DnGqtkiypwC5pB2dJSzRx3lok1A6ZEZ2ZfsjtY08i7YB1Jz05-Y4mS46KsEQTVPbQgOIYK51AevxMplblA94IvGhb08trgN1qqoSB2wwskQbfJTp6TvA9DN8NMEi-ASHGfmYqBqW-YqziH0yjibxYlrx3ZHSPWS-iRBSXzY0S9g-H9Tr_bzFpPPNony4z3Qlh0NrY-o95BO2X6qVWXQ86S_iY_0ZkW-YjSaiF_199soJRhRILlvmrwA9wDRWsUB0VHOnzl-IsI-Nwy9xFAOH4Iwfw_gPS3hp-)}
library(dplyr)
setwd("~/Downloads/School/Spring 2024/CSCI 3300")
library(readr)
Countries_Continents <- read_csv("Countries-Continents.csv")
View(Countries_Continents)
library(readr)
LatLong <- read_csv("LatLong.csv")
View(LatLong)
left_join(Countries_Continents, LatLong, "Country" == "name")
left_join(Countries_Continents, LatLong, "Country" = "name")
left_join(Countries_Continents, LatLong, join.by = c("Country" = "name"))
left_join(Countries_Continents, LatLong, by = c("Country" = "name"))
View(Countries_Continents)
View(LatLong)
final <- left_join(Countries_Continents, LatLong, by = c("Country" = "name"))
View(final)
write.csv(final, "GameDataset.csv", row.names = FALSE)
install.packages("RMariaDB")
install.packages("DBI")
library(RMariaDB)
convert_image_to_blob <- function(image_path) {
# Read the image file in binary mode
con <- file(image_path, "rb")
bin_data <- readBin(con, "raw", file.info(image_path)$size)
close(con)
return(bin_data)
}
setwd("~/Desktop/CountryImages")
afghanistan <- convert_image_to_blob("~/Desktop/CountryImages/Afghanistan.png")
afghanistan
#Convert Images to BLOB:
image_directory <- "~/Desktop/CountryImages/"
# List all image files in the directory
image_files <- list.files(image_directory, full.names = TRUE)
# Initialize an empty list to store the blob objects
blob_objects <- list()
# Iterate over each file and convert it to a blob
for (image_path in image_files) {
country_name <- tools::file_path_sans_ext(basename(image_path))
blob_objects[[country_name]] <- convert_image_to_blob(image_path)
}
View(blob_objects)
blob_objects[["Afghanistan"]]
con <- dbConnect(RMariaDB::MariaDB(), username = "root", password = "Zecompra3023479$", dbname = "MapDatabase", host = "localhost")
for (country in names(blob_objects)) {
# Prepare the update query
query <- paste0("UPDATE maps_dataset SET image = ? WHERE Country_Lower = '", tolower(country), "'")
# Use dbSendPreparedQuery for safe updating
dbExecute(con, query, params = list(blob_objects[[country]]))
}
for (country in names(blob_objects)) {
# Convert the blob to a hexadecimal string
hex_data <- as.character(blob_objects[[country]])
hex_string <- paste0("X'", paste(hex_data, collapse = ""), "'")
# Prepare the update query with the hexadecimal string
query <- sprintf("UPDATE maps_dataset SET image = %s WHERE Country_Lower = '%s'", hex_string, tolower(country))
# Execute the query
dbExecute(con, query)
}
for (country in names(blob_objects)) {
# Convert the blob to a hexadecimal string
hex_data <- as.character(blob_objects[[country]])
hex_string <- paste0("X'", paste(hex_data, collapse = ""), "'")
# Prepare the update query with the hexadecimal string
query <- sprintf("UPDATE maps_dataset SET image = %s WHERE Country_Lower = '%s'", hex_string, tolower(country))
# Execute the query
dbExecute(con, query)
}
for (country in names(blob_objects)) {
# Prepare the update query
query <- paste0("UPDATE maps_dataset SET image = ? WHERE Country_Lower = '", tolower(country), "'")
# Use dbSendPreparedQuery for safe updating
dbExecute(con, query, params = list(blob_objects[[country]]))
}
query <- "INSERT INTO images (image) VALUES (?)"
View(blob_objects)
dbExecute(conn, query, blob_objects[["Afghanistan"]])
dbExecute(con, query, blob_objects[["Afghanistan"]])
con <- dbConnect(RMariaDB::MariaDB(), username = "root", password = "Zecompra3023479$", dbname = "MapDatabase", host = "localhost")
query <- "INSERT INTO images (image) VALUES (?)"
dbExecute(con, query, blob_objects[["Afghanistan"]])
con <- dbConnect(RMariaDB::MariaDB(), username = "root", password = "Zecompra3023479$", dbname = "MapDatabase", host = "localhost")
for (country in names(blob_objects)) {
# Prepare the update query
query <- paste0("UPDATE maps_dataset SET image = ? WHERE Country_Lower = '", tolower(country), "'")
# Use dbSendPreparedQuery for safe updating
dbExecute(con, query, params = list(blob_objects[[country]]))
}
View(blob_objects)
blob_objects[["Afghanistan"]]
con <- dbConnect(RMariaDB::MariaDB(), username = "root", password = "Zecompra3023479$", dbname = "MapDatabase", host = "localhost")
for (country in names(blob_objects)) {
# Prepare the update query
query <- paste0("UPDATE maps_dataset SET image = ? WHERE Country_Lower = '", tolower(country), "'")
# Use dbSendPreparedQuery for safe updating
dbExecute(con, query, params = list(blob_objects[[country]]))
}
install.packages("RMySQL")
library(RMySQL)
library(DBI)
con <- dbConnect(MySQL(), user='root', password='Zecompra3023479$',
dbname='MapDatabase', host='localhost')
pwd
pwd
SHOW Tables;
image_file_path <- '~/Desktop/CountryImages/Afghanistan.png'
binary_data <- readBin(image_file_path, what='raw', n=file.info(image_file_path)$size)
insert_image <- function(conn, binary_data) {
query <- "INSERT INTO Images (image) VALUES (?)"
dbSendQuery(conn, query, data = list(binary_data))
}
insert_image(con, binary_data)
insert_image <- function(conn, binary_data) {
query <- "INSERT INTO Images (image) VALUES (?)"
statement <- dbSendStatement(conn, query)
binded <- dbBind(statement, list(binary_data))
dbClearResult(binded)
}
insert_image(con, binary_data)
insert_image <- function(conn, binary_data) {
query <- "INSERT INTO Images (image) VALUES (?)"
interpolated_query <- sqlInterpolate(conn, query, binary_data)
dbSendQuery(conn, interpolated_query)
}
insert_image(con, binary_data)
binary_data <- readBin(image_file_path, what='raw', n=file.info(image_file_path)$size)
binary_data
insert_image <- function(conn, binary_data) {
query <- "INSERT INTO Images (image) VALUES (?)"
dbSendQuery(conn, query, data = list(binary_data))
}
insert_image(con, binary_data)
query <- "INSERT INTO maps_dataset (image) VALUES (?)"
dbSendQuery(con, statement = query, params = list(binary_data))
stmt <- dbSendStatement(con, query)
query <- "INSERT INTO maps_dataset (image) VALUES (?)"
stmt <- dbSendStatement(con, query)
image_file_path <- '~/Desktop/CountryImages/Afghanistan.png'
binary_data <- readBin(image_file_path, what='raw', n=file.info(image_file_path)$size)
# Prepare SQL query to insert binary data into the table
query <- "INSERT INTO YourTableName (ColumnName) VALUES (?)"
# Bind the parameter and execute the query
dbExecute(con, query, params = list(binary_data))
con <- dbConnect(MySQL(), user='root', password='Zecompra3023479$',
dbname='MapDatabase', host='localhost')
image_file_path <- '~/Desktop/CountryImages/Afghanistan.png'
binary_data <- readBin(image_file_path, what='raw', n=file.info(image_file_path)$size)
# Prepare SQL query to insert binary data into the table
query <- "INSERT INTO maps_dataset image VALUES (?)"
# Bind the parameter and execute the query
dbExecute(con, query, params = list(binary_data))
View(binary_data)
binary_data
con <- dbConnect(MySQL(), user='root', password='Zecompra3023479$',
dbname='MapDatabase', host='localhost')
image_file_path <- '~/Desktop/CountryImages/Afghanistan.png'
binary_data <- readBin(image_file_path, what='raw', n=file.info(image_file_path)$size)
